import readlineSync from "readline-sync";
import chalk from "chalk";
import chalkAnimation from "chalk-animation";
import { setTimeout as pause } from "timers/promises";
import figlet from "figlet";
import gradient from "gradient-string";
import { createSpinner } from "nanospinner";
// ü™ô üß∏‡æÄ‡Ω≤ ‚ÑπÔ∏è Ÿ°Ÿ•ŸßŸ§‚ô° moneyüí∏.ìÜù ìÜü ìÜû ìÜù ìÜü(„Å• ·¥ó _·¥ó)„Å•‚ô°‡ºò‚ãÜüòç‚≠êüí±üí≤ ü§ëüí∞üí∏üí≤üß†
// üè¶üèßüí≥üíµ
// üíµüí∏üí∞üí≤üéÅüí¥üí∂üíØ

const benutzer = [
  { benutzername: "benutzer1", pin: "1234", guthaben: 1000, transaktionen: [] },
  { benutzername: "benutzer2", pin: "5678", guthaben: 500, transaktionen: [] },
];

let aktuellerBenutzer = null;

// Funktion zum Ausloggen des Benutzers
function ausloggen() {
  // Starten des Ausloggen-Spinners
  const spinner = createSpinner("Abmelden...").start();
  setTimeout(() => {
    // Stoppen des Spinners nach 1 Sekunde
    spinner.stop();
    // Ausloggen erfolgreich, Benutzer auf null setzen und zur√ºck zum Login
    console.log(chalk.yellow("Abgemeldet."));
    aktuellerBenutzer = null;
    loginDe();
  }, 1000);
}

// Funktion zum Beenden des Programms
function programmBeenden() {
  // Starten des Beenden-Spinners
  const spinner = createSpinner("Beenden...").start();
  setTimeout(() => {
    // Stoppen des Spinners nach 1 Sekunde
    spinner.stop();
    // Programm beendet
    console.log(chalk.yellow("Sie haben das Programm verlassen."));
    process.exit(0);
  }, 1000);
}

export default function loginDe() {
  const benutzername = readlineSync.question("Benutzername eingeben: ");

  if (benutzername.toLowerCase() === "exit") {
    console.log(chalk.yellow("Beenden..."));
    process.exit(0);
  }

  const pin = readlineSync.question("PIN eingeben: ", { hideEchoBack: true });

  if (pin.toLowerCase() === "exit") {
    console.log(chalk.yellow("Beenden..."));
    process.exit(0);
  }

  // √úberpr√ºfen, ob die Benutzerdaten g√ºltig sind
  aktuellerBenutzer = benutzer.find(
    (benutzer) => benutzer.benutzername === benutzername && benutzer.pin === pin
  );
  if (aktuellerBenutzer) {
    // Login erfolgreich
    console.log(chalk.green(`Willkommen, ${aktuellerBenutzer.benutzername}!`));
    console.log(`
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚£∂‚£ø‚£ø‚£∑‚£§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚†ã‚£â‚£â‚†ô‚£ø‚£ø‚£ø‚£∑‚£¶‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚£ø‚£ø‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£§‚°Ä‚†Ä

     Willkommen, ${chalk.green(aktuellerBenutzer.benutzername)}
‚†Ä
‚†Ä‚†Ä‚†Ä‚£§‚£§‚£§‚£§‚£§‚°Ñ‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£ø‚£ø‚£§‚£§‚£Ñ‚°Ä‚†Ä‚¢†‚£§‚£§‚£§‚£§‚£§‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚°ø‚†õ‚†õ‚†õ‚†õ‚†õ‚†á‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£§‚£§‚£§‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚¢π‚£ø‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†ª‚£ø‚£∑‚£§‚£§‚£§‚£§‚£æ‚£ø‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚£ø‚£ø‚†õ‚†õ‚†â‚†Å‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†õ‚†õ‚†õ‚†õ‚†õ‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†õ‚†õ‚†õ‚†õ‚†õ‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†â‚†â‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä
‚†Ä‚¢∞‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚°Ü‚†Ä
‚†Ä‚†à‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†Å‚†Ä
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
`);
    hauptmen√º();
  } else {
    console.log(
      chalk.red(
        "‚ùå Ung√ºltiger Benutzername oder PIN. Bitte versuchen Sie es erneut."
      )
    );
    loginDe();
  }
}

function hauptmen√º() {
  console.log(`
\nHauptmen√º üèß:
1. Kontostand pr√ºfen 
2. Geld einzahlen 
3. Geld abheben 
4. Geld √ºberweisen 
5. Transaktionshistorie anzeigen 
6. Abmelden
7. Beenden`);

  const auswahl = readlineSync.questionInt("Ihre Auswahl eingeben: ");

  if (auswahl === 1) {
    kontostandPr√ºfen();
  } else if (auswahl === 2) {
    geldEinzahlen();
  } else if (auswahl === 3) {
    geldAbheben();
  } else if (auswahl === 4) {
    geld√úberweisen();
  } else if (auswahl === 5) {
    transaktionshistorieAnzeigen();
  } else if (auswahl === 6) {
    console.log(chalk.yellow("Abmelden..."));
    ausloggen();
  } else if (auswahl === 7) {
    console.log(chalk.yellow("Beenden..."));
    programmBeenden();
  } else {
    console.log(chalk.red("Ung√ºltige Auswahl. Bitte versuchen Sie es erneut."));
    hauptmen√º();
  }
}

function kontostandPr√ºfen() {
  console.log(chalk.green(`Ihr Kontostand: $${aktuellerBenutzer.guthaben}`));
  hauptmen√º();
}

function geldEinzahlen() {
  const betragEingabe = readlineSync.question(
    "Betrag zum Einzahlen eingeben: $"
  );

  if (betragEingabe.toLowerCase() === "exit") {
    console.log(chalk.yellow("Beenden..."));
    hauptmen√º();
  }

  const betrag = parseInt(betragEingabe);

  if (isNaN(betrag)) {
    console.log(
      chalk.red(
        '‚ùå Ung√ºltige Eingabe. Bitte geben Sie eine g√ºltige Zahl oder "exit" ein.'
      )
    );
    hauptmen√º();
    return;
  }

  if (betrag <= 0) {
    console.log(chalk.red("‚ùå Ung√ºltiger Betrag. Einzahlung fehlgeschlagen."));
    hauptmen√º();
    return;
  }

  aktuellerBenutzer.guthaben += betrag;
  aktuellerBenutzer.transaktionen.push({
    typ: "Einzahlung",
    betrag,
    datum: new Date(),
  });
  console.log(chalk.green("‚àö Einzahlung erfolgreich."));
  hauptmen√º();
}

function geldAbheben() {
  const betragStr = readlineSync.question(
    "Geben Sie den abzuhebenden Betrag ein: $"
  );

  if (betragStr.toLowerCase() === "exit") {
    console.log(chalk.yellow("Beenden..."));
    hauptmen√º();
  }

  const betrag = parseFloat(betragStr); // parseInt

  if (isNaN(betrag) || betrag <= 0) {
    console.log(chalk.red("‚ùå Ung√ºltiger Betrag. Abhebung fehlgeschlagen."));
    hauptmen√º();
    return;
  }

  if (betrag > aktuellerBenutzer.guthaben) {
    console.log(chalk.red("‚ùå Unzureichendes Guthaben."));
  } else {
    aktuellerBenutzer.guthaben -= betrag;
    aktuellerBenutzer.transaktionen.push({
      typ: "Abhebung",
      betrag,
      datum: new Date(),
    });
    console.log(chalk.green("‚àö Abhebung erfolgreich."));
  }

  hauptmen√º();
}

function geld√úberweisen() {
  function formatiereFormularfeld(label, wert) {
    const maxLabelL√§nge = 22; // Maximale L√§nge f√ºr das Label
    const labelMitPadding = label + ":".padEnd(maxLabelL√§nge - label.length);
    return `| ${labelMitPadding} ${wert.padEnd(47 - maxLabelL√§nge, "_")}   |`;
  }

  // const empf√§ngerBenutzernamePlatzhalter = '[__________________________]';
  // const zweckPlatzhalter = '[_________________________]';

  const empf√§ngerBenutzername = readlineSync.question(
    "Geben Sie den Benutzernamen des Empf√§ngers ein: "
  );

  if (empf√§ngerBenutzername.toLowerCase() === "exit") {
    console.log(chalk.yellow("Beenden..."));
    hauptmen√º();
    return;
  }

  const empf√§nger = users.find(
    (benutzer) => benutzer.benutzername === empf√§ngerBenutzername
  );

  if (!empf√§nger) {
    console.log(chalk.red("Empf√§nger nicht gefunden."));
    hauptmen√º();
    return;
  }

  const zweck = readlineSync.question(
    "Geben Sie den Zweck der √úberweisung ein: "
  );
  const betragStr = readlineSync.question(
    "Geben Sie den zu √ºberweisenden Betrag ein: $"
  );

  if (betragStr.toLowerCase() === "exit") {
    console.log(chalk.yellow("Beenden..."));
    hauptmen√º();
    return; // Hier, wenn es ein Problem gibt!
  }

  const betrag = parseFloat(betragStr);

  if (isNaN(betrag) || betrag <= 0) {
    console.log(chalk.red("Ung√ºltiger Betrag. √úberweisung fehlgeschlagen."));
    hauptmen√º();
    return;
  }

  //----------------------------------------
  if (betrag > aktuellerBenutzer.guthaben) {
    console.log(chalk.red("Unzureichendes Guthaben."));
    hauptmen√º();
    return;
  }

  const spinner = createSpinner("√úberweise Geld...").start();

  setTimeout(() => {
    // Geld √ºberweisen
    aktuellerBenutzer.guthaben -= betrag;
    empf√§nger.guthaben += betrag;

    // Transaktion aufzeichnen
    aktuellerBenutzer.transaktionen.push({
      typ: "√úberweisung (aus)",
      betrag: -betrag,
      datum: new Date(),
      empf√§nger: empf√§ngerBenutzername,
      zweck: zweck,
    });

    empf√§nger.transaktionen.push({
      typ: "√úberweisung (ein)",
      betrag: +betrag,
      datum: new Date(),
      absender: aktuellerBenutzer.benutzername,
      zweck: zweck,
    });

    spinner.stop();

    const formular = [
      `Geld √úberweisen:`,

      `  __________________________________________________ `,
      `//                                                  \\  `,
      `|   √úberweisungsformular                              |`,
      `|____________________________________________________|`,
      formatiereFormularfeld("Empf√§nger Benutzername", empf√§nger.benutzername),
      `|                                                    |`,
      formatiereFormularfeld("Zweck der √úberweisung", zweck),
      `|                                                    |`,
      formatiereFormularfeld("Betrag der √úberweisung", "$" + betrag.toFixed(2)),
      `|____________________________________________________|`,
      `|                                                    |`,
      `| [Absenden]                                         |`,
      `|____________________________________________________|`,
    ];

    console.log(chalk.green("√úberweisung erfolgreich."));
    console.log(formular);
    hauptmen√º();
  }, 2000);
}

function transaktionshistorieAnzeigen() {
  console.log(chalk.green("\nTransaktionsverlauf:"));
  aktuellerBenutzer.transaktionen.forEach((transaktion) => {
    console.log(
      `${transaktion.datum} - ${transaktion.typ}: $${transaktion.betrag}`
    );
    // toLocalString() oder toString()
  });
  hauptmen√º();
}
